local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Manga Hub | 67 ponte de vidro",
    SubTitle = "PortuguÃªs",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local originalColors = {}
local runToggle = false

local function updateGlassTiles()
    local glassTiles = workspace:FindFirstChild("GlassTiles")
    if glassTiles then
        for i = 1, 42 do
            local model = glassTiles:FindFirstChild(tostring(i))
            if model and model:IsA("Model") then
                for _, partName in ipairs({"Tile1", "Tile2"}) do
                    local part = model:FindFirstChild(partName)
                    if part and part:IsA("BasePart") then
                        if not originalColors[part] then
                            originalColors[part] = part.Color
                        end
                        if runToggle then
                            local debounce = part:FindFirstChild("Debounce")
                            if debounce and debounce:IsA("BoolValue") then
                                part.Color = Color3.fromRGB(255, 0, 0)
                            else
                                part.Color = Color3.fromRGB(0, 255, 0)
                            end
                        else
                            part.Color = originalColors[part]
                        end
                    end
                end
            end
        end
    end
end

local Tabs = {
    SuperOP = Window:AddTab({Title = "Super OP", Icon = ""})
}

local Toggle = Tabs.SuperOP:AddToggle("RevealGlass", {Title = "Revelar vidros certos e errados", Default = false})

Toggle:OnChanged(function()
    runToggle = Toggle.Value
    if runToggle then
        spawn(function()
            while runToggle do
                updateGlassTiles()
                wait(0.1)
            end
        end)
    else
        updateGlassTiles()
    end
end)

Toggle:SetValue(false)
